# Test end-to-end fuzzing. This test focuses on arg reuse in fz.Chain.
# See github.com/thepudds/fzgen/examples/inputs/arg-reuse for comments about target.
# Requires -end2end flag for 'go test'.
#
# Some test details:
#   1. We assume a 1.18 gotip is in the path. (We exit early if no gotip is in path,
#      or if it appears to be the wrong version).
#   2. To just run this script, execute from the fzgen directory:
#      go test -run=TestScripts/arg_reuse_fuzzing -end2end
#   3. Adding '-v -testwork' shows more detail, including the temp dir location,
#      which will be left behind for inspection or manual debugging.

[!exec:gotip$exe] skip 'skipping because no gotip found in path'

# Validate result is Go 1.18+. 
exec gotip version
# We do not envision a Go 2.
stdout 'go version.*go1\.(1[8-9]|[2-9][0-9]|[1-9][0-9][0-9])'

# Set up a usable module, including the run time dependency for fzgen/fuzzer
# Note: we force use of our local copy of fzgen via a 'replace' directive.
go mod init temp
go mod edit -replace github.com/thepudds/fzgen=$FZLOCALDIR
go get github.com/thepudds/fzgen/fuzzer
go list -m all

# Create our set of wrappers, which will be chainable.
fzgen -chain github.com/thepudds/fzgen/examples/inputs/arg-reuse
exists autofuzzchain_test.go

# TODO: consider making the cmd/go fuzzing deterministic with -parallel=1,
# but based on current GODEBUG=fuzzseed=N implementation, not sure if that is useful here.
# env GODEBUG=fuzzseed=1

# TODO: ideally we would also start with an empty cached corpus, but 'env GOCACHE=$WORK' also slows down build/test currently.
# Could manually clean cache globally or surgically, or ...

# Let's go! Start fuzzing our autogenerated loop.
# This can take 2-3 min to hit the desired panic from scratch with an empty corpus,
# but we include a current crasher below, which just takes a few seconds.
# TODO: when we have better fuzzing efficiency, we might remove the crasher from here.
! exec gotip test -fuzz=. -fuzztime=60s
stdout 'panic: bingo'

# This crasher is currently:
#   gotip test -run=Fuzz_New_Chain/d433d5c99
# 
# PLANNED STEPS: (sequential: true)
#
#        Fuzz_PanicOnArgReuse_Step1(
#                3472328296227680304,
#                3472328296227745840,
#        )
#        Fuzz_PanicOnArgReuse_Step2(
#                3472328296227680304,
#                3472328296227680304,
#        )
#        Fuzz_PanicOnArgReuse_Step1(
#                0,
#                0,
#        )

-- testdata/fuzz/Fuzz_New_Chain/crasher --
go test fuzz v1
[]byte("000000000000000100000000000000000000001000000000000000000000")